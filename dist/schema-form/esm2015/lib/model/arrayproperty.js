import { PropertyGroup } from './formproperty';
import { PROPERTY_TYPE_MAPPING } from './typemapping';
export class ArrayProperty extends PropertyGroup {
    constructor(formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path, logger) {
        super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path, logger);
        this.formPropertyFactory = formPropertyFactory;
    }
    addItem(value = null) {
        let newProperty = this.addProperty();
        newProperty.reset(value, false);
        return newProperty;
    }
    addProperty() {
        let itemSchema = this.schema.items;
        if (Array.isArray(this.schema.items)) {
            const itemSchemas = this.schema.items;
            if (itemSchemas.length > this.properties.length) {
                itemSchema = itemSchema[this.properties.length];
            }
            else if (this.schema.additionalItems) {
                itemSchema = this.schema.additionalItems;
            }
            else {
                // souldn't add new items since schema is undefined for the item at its position
                return null;
            }
        }
        let newProperty = this.formPropertyFactory.createProperty(itemSchema, this);
        this.properties.push(newProperty);
        return newProperty;
    }
    removeItem(item) {
        this.properties = this.properties.filter(i => i !== item);
        this.updateValueAndValidity(false, true);
    }
    setValue(value, onlySelf) {
        this.createProperties();
        this.resetProperties(value);
        this.updateValueAndValidity(onlySelf, true);
    }
    _hasValue() {
        return true;
    }
    _updateValue() {
        this.reduceValue();
    }
    reduceValue() {
        const value = [];
        this.forEachChild((property, _) => {
            if (property.visible && property._hasValue()) {
                value.push(property.value);
            }
        });
        this._value = value;
    }
    reset(value, onlySelf = true) {
        value = value || this.schema.default || [];
        this.properties = [];
        this.resetProperties(value);
        this.updateValueAndValidity(onlySelf, true);
    }
    createProperties() {
        this.properties = [];
    }
    resetProperties(value) {
        for (let idx in value) {
            if (value.hasOwnProperty(idx)) {
                let property = this.addProperty();
                property.reset(value[idx], true);
            }
        }
    }
}
PROPERTY_TYPE_MAPPING.array = (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path, formPropertyFactory, logger) => {
    return new ArrayProperty(formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path, logger);
};
//# sourceMappingURL=data:application/json;base64,